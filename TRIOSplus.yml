openapi: "3.0.2"
info:
  title: TRIOS Plus
  description: Trios Plus - Discover Our Vibrant Coworking Space Near You and Watch Your Team Blossom with the Finest Office Amenities
  contact:
    name: TRIOS Plus
    url: "https://trios.co.in/"
    email: contact@trios.co.in
  version: "1.0.0"
servers:
  - url: https://8e9jyfmx96.execute-api.ap-south-1.amazonaws.com/staging/dynamic
    description: "TRIOS Plus Api URL"
    variables:
      basePath:
        default: "staging"
tags:
  - name: Trios Plus
    description: Trios Plus - Discover Our Vibrant Coworking Space Near You and Watch Your Team Blossom with the Finest Office Amenities

paths:
  /company:
    post:
      tags:
        - Trios Plus
      summary: "Post Company Data"
      description: "The /company endpoint is used to create a new company within the system."

      requestBody:
        content:
          application,json:
            schema:
              $ref: "#/components/schemas/companySchema"

          application.xml:
            schema:
              $ref: "#/components/schemas/companySchema"

          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/companySchema"
      responses:
        "201":
          description: "Company Created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/companySchema"

        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/badRequestBadRequest"
        "401":
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/badRequestUnauthorized"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/internalServerErrror"
      security:
        - bearerAuth: []

    get:
      tags:
        - Trios Plus
      summary: "Get Company Data"
      description: "The /company endpoint is used to get a list of all companies within the system."
      parameters:
        - name: limit
          in: query
          description: Number of results to return per page
          required: false
          schema:
            type: integer
            default: 10
        - name: sort
          in: query
          description: Sort the results based on a specific field (e.g., name, createdAt)
          required: false
          schema:
            type: string
            default: createdAt
        - name: searchKey
          in: query
          description: Key to search within company data (e.g., name, city)
          required: false
          schema:
            type: string
        - name: searchValue
          in: query
          description: Value to search for based on the specified searchKey
          required: false
          schema:
            type: string
      responses:
        "200":
          description: "Successful response"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/companySchema"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/badRequestBadRequest"
        "401":
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/badRequestUnauthorized"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/internalServerErrror"
      security:
        - bearerAuth: []
  /company/{companyId}:
    get:
      tags:
        - Trios Plus
      summary: "Get Company by ID"
      description: "Retrieve a specific company by its ID."
      parameters:
        - name: companyId
          in: path
          description: ID of the company to retrieve
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Successful response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/companySchema"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/badRequestBadRequest"
        "401":
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/badRequestUnauthorized"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/internalServerErrror"
      security:
        - bearerAuth: []
    put:
      tags:
        - Trios Plus
      summary: "Update Company by ID"
      description: "Update a specific company by its ID."
      parameters:
        - name: companyId
          in: path
          description: ID of the company to update
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/companySchema"
          application/xml:
            schema:
              $ref: "#/components/schemas/companySchema"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/companySchema"
      responses:
        "200":
          description: "Company Updated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/companySchema"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/badRequestBadRequest"
        "401":
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/badRequestUnauthorized"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/internalServerErrror"
      security:
        - bearerAuth: []
  /user:
    post:
      tags:
        - Trios Plus
      summary: "Create a new user"
      description: "The /user endpoint is used to create a new user within the system."
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
          application/xml:
            schema:
              $ref: "#/components/schemas/User"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "201":
          description: "User Created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/badRequestBadRequest"
        "401":
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/badRequestUnauthorized"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/internalServerErrror"
      security:
        - bearerAuth: []
    get:
      tags:
        - Trios Plus
      summary: "Get a list of users"
      description: "The /user endpoint is used to get a list of all users within the system."
      parameters:
        - name: limit
          in: query
          description: Number of results to return per page
          required: false
          schema:
            type: integer
            default: 10
        - name: sort
          in: query
          description: Sort the results based on a specific field (e.g., username, createdAt)
          required: false
          schema:
            type: string
            default: createdAt
        - name: searchKey
          in: query
          description: Key to search within user data (e.g., username, email)
          required: false
          schema:
            type: string
        - name: searchValue
          in: query
          description: Value to search for based on the specified searchKey
          required: false
          schema:
            type: string
      responses:
        "200":
          description: "Successful response"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/badRequestBadRequest"
        "401":
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/badRequestUnauthorized"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/internalServerErrror"
      security:
        - bearerAuth: []
  /user/{userId}:
    get:
      tags:
        - Trios Plus
      summary: "Get a user by ID"
      description: "Retrieve a specific user by their ID."
      parameters:
        - name: userId
          in: path
          description: ID of the user to retrieve
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Successful response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/badRequestBadRequest"
        "401":
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/badRequestUnauthorized"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/internalServerErrror"
      security:
        - bearerAuth: []
    put:
      tags:
        - Trios Plus
      summary: "Edit or Update a user by ID"
      description: "The /user/{userId} endpoint is used to edit or update a specific user by their ID."
      parameters:
        - name: userId
          in: path
          description: ID of the user to edit or update
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
          application/xml:
            schema:
              $ref: "#/components/schemas/User"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: "User Edited/Updated Successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/badRequestBadRequest"
        "401":
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/badRequestUnauthorized"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/internalServerErrror"
      security:
        - bearerAuth: []
  /branch:
    post:
      tags:
        - Trios Plus
      summary: "Create a new branch"
      description: "The /branch endpoint is used to create a new branch within the system."
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Branch"
          application/xml:
            schema:
              $ref: "#/components/schemas/Branch"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Branch"
      responses:
        "201":
          description: "Branch Created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Branch"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/badRequestBadRequest"
        "401":
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/badRequestUnauthorized"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/internalServerErrror"
      security:
        - bearerAuth: []
    get:
      tags:
        - Trios Plus
      summary: "Get a list of branches"
      description: "The /branch endpoint is used to get a list of all branches within the system."
      parameters:
        - name: limit
          in: query
          description: Number of results to return per page
          required: false
          schema:
            type: integer
            default: 10
        - name: sort
          in: query
          description: Sort the results based on a specific field (e.g., label, createdAt)
          required: false
          schema:
            type: string
            default: createdAt
        - name: searchKey
          in: query
          description: Key to search within branch data (e.g., label, branchCity)
          required: false
          schema:
            type: string
        - name: searchValue
          in: query
          description: Value to search for based on the specified searchKey
          required: false
          schema:
            type: string
      responses:
        "200":
          description: "Successful response"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Branch"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/badRequestBadRequest"
        "401":
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/badRequestUnauthorized"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/internalServerErrror"
      security:
        - bearerAuth: []
  /branch/{branchId}:
    get:
      tags:
        - Trios Plus
      summary: "Get a branch by ID"
      description: "Retrieve a specific branch by its ID."
      parameters:
        - name: branchId
          in: path
          description: ID of the branch to retrieve
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Successful response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Branch"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/badRequestBadRequest"
        "401":
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/badRequestUnauthorized"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/internalServerErrror"
      security:
        - bearerAuth: []
    put:
      tags:
        - Trios Plus
      summary: "Update a branch by ID"
      description: "Update a specific branch by its ID."
      parameters:
        - name: branchId
          in: path
          description: ID of the branch to update
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Branch"
          application/xml:
            schema:
              $ref: "#/components/schemas/Branch"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Branch"
      responses:
        "200":
          description: "Branch Updated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Branch"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/badRequestBadRequest"
        "401":
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/badRequestUnauthorized"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/internalServerErrror"
      security:
        - bearerAuth: []
  /category:
    post:
      tags:
        - Trios Plus
      summary: "Create a new category"
      description: "The /category endpoint is used to create a new category within the system."
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Category"
          application/xml:
            schema:
              $ref: "#/components/schemas/Category"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Category"
      responses:
        "201":
          description: "Category Created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/badRequestBadRequest"
        "401":
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/badRequestUnauthorized"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/internalServerErrror"
      security:
        - bearerAuth: []
    get:
      tags:
        - Trios Plus
      summary: "Get a list of categories"
      description: "The /category endpoint is used to get a list of all categories within the system."
      parameters:
        - name: limit
          in: query
          description: Number of results to return per page
          required: false
          schema:
            type: integer
            default: 10
        - name: sort
          in: query
          description: Sort the results based on a specific field (e.g., label, createdAt)
          required: false
          schema:
            type: string
            default: createdAt
        - name: searchKey
          in: query
          description: Key to search within category data (e.g., label, branchName)
          required: false
          schema:
            type: string
        - name: searchValue
          in: query
          description: Value to search for based on the specified searchKey
          required: false
          schema:
            type: string
      responses:
        "200":
          description: "Successful response"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Category"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/badRequestBadRequest"
        "401":
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/badRequestUnauthorized"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/internalServerErrror"
      security:
        - bearerAuth: []
  /category/{categoryId}:
    get:
      tags:
        - Trios Plus
      summary: "Get a category by ID"
      description: "Retrieve a specific category by its ID."
      parameters:
        - name: categoryId
          in: path
          description: ID of the category to retrieve
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Successful response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/badRequestBadRequest"
        "401":
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/badRequestUnauthorized"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/internalServerErrror"
      security:
        - bearerAuth: []
    put:
      tags:
        - Trios Plus
      summary: "Update a category by ID"
      description: "Update a specific category by its ID."
      parameters:
        - name: categoryId
          in: path
          description: ID of the category to update
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Category"
          application/xml:
            schema:
              $ref: "#/components/schemas/Category"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Category"
      responses:
        "200":
          description: "Category Updated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/badRequestBadRequest"
        "401":
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/badRequestUnauthorized"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/internalServerErrror"
      security:
        - bearerAuth: []
  /product:
    post:
      tags:
        - Trios Plus
      summary: "Create a new product"
      description: "The /product endpoint is used to create a new product within the system."
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
          application/xml:
            schema:
              $ref: "#/components/schemas/Product"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Product"
      responses:
        "201":
          description: "Product Created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/badRequestBadRequest"
        "401":
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/badRequestUnauthorized"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/internalServerErrror"
      security:
        - bearerAuth: []
    get:
      tags:
        - Trios Plus
      summary: "Get a list of products"
      description: "The /product endpoint is used to get a list of all products within the system."
      parameters:
        - name: limit
          in: query
          description: Number of results to return per page
          required: false
          schema:
            type: integer
            default: 10
        - name: sort
          in: query
          description: Sort the results based on a specific field (e.g., name, createdAt)
          required: false
          schema:
            type: string
            default: createdAt
        - name: searchKey
          in: query
          description: Key to search within product data (e.g., name, branchName)
          required: false
          schema:
            type: string
        - name: searchValue
          in: query
          description: Value to search for based on the specified searchKey
          required: false
          schema:
            type: string
      responses:
        "200":
          description: "Successful response"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/badRequestBadRequest"
        "401":
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/badRequestUnauthorized"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/internalServerErrror"
      security:
        - bearerAuth: []
  /product/{productId}:
    get:
      tags:
        - Trios Plus
      summary: "Get a product by ID"
      description: "Retrieve a specific product by its ID."
      parameters:
        - name: productId
          in: path
          description: ID of the product to retrieve
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Successful response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/badRequestBadRequest"
        "401":
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/badRequestUnauthorized"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/internalServerErrror"
      security:
        - bearerAuth: []
    put:
      tags:
        - Trios Plus
      summary: "Update a product by ID"
      description: "Update a specific product by its ID."
      parameters:
        - name: productId
          in: path
          description: ID of the product to update
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
          application/xml:
            schema:
              $ref: "#/components/schemas/Product"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Product"
      responses:
        "200":
          description: "Product Updated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/badRequestBadRequest"
        "401":
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/badRequestUnauthorized"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/internalServerErrror"
      security:
        - bearerAuth: []
  /rateContract:
    post:
      tags:
        - Trios Plus
      summary: "Create a new rate contract"
      description: "The /rateContract endpoint is used to create a new rate contract within the system."
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RateContract"
          application/xml:
            schema:
              $ref: "#/components/schemas/RateContract"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/RateContract"
      responses:
        "201":
          description: "Rate Contract Created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RateContract"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/badRequestBadRequest"
        "401":
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/badRequestUnauthorized"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/internalServerErrror"
      security:
        - bearerAuth: []
    get:
      tags:
        - Trios Plus
      summary: "Get a list of rate contracts"
      description: "The /rateContract endpoint is used to get a list of all rate contracts within the system."
      parameters:
        - name: limit
          in: query
          description: Number of results to return per page
          required: false
          schema:
            type: integer
            default: 10
        - name: sort
          in: query
          description: Sort the results based on a specific field (e.g., productName, createdAt)
          required: false
          schema:
            type: string
            default: createdAt
        - name: searchKey
          in: query
          description: Key to search within rate contract data (e.g., productName, branchName)
          required: false
          schema:
            type: string
        - name: searchValue
          in: query
          description: Value to search for based on the specified searchKey
          required: false
          schema:
            type: string
      responses:
        "200":
          description: "Successful response"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RateContract"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/badRequestBadRequest"
        "401":
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/badRequestUnauthorized"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/internalServerErrror"
      security:
        - bearerAuth: []
  /rateContract/{rateContractId}:
    get:
      tags:
        - Trios Plus
      summary: "Get a rate contract by ID"
      description: "Retrieve a specific rate contract by its ID."
      parameters:
        - name: rateContractId
          in: path
          description: ID of the rate contract to retrieve
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Successful response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RateContract"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/badRequestBadRequest"
        "401":
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/badRequestUnauthorized"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/internalServerErrror"
      security:
        - bearerAuth: []
    put:
      tags:
        - Trios Plus
      summary: "Update a rate contract by ID"
      description: "Update a specific rate contract by its ID."
      parameters:
        - name: rateContractId
          in: path
          description: ID of the rate contract to update
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RateContract"
          application/xml:
            schema:
              $ref: "#/components/schemas/RateContract"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/RateContract"
      responses:
        "200":
          description: "Rate Contract Updated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RateContract"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/badRequestBadRequest"
        "401":
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/badRequestUnauthorized"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/internalServerErrror"
      security:
        - bearerAuth: []

  /agreement:
    post:
      tags:
        - Trios Plus
      summary: "Create a new agreement"
      description: "The /agreement endpoint is used to create a new agreement within the system."
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Agreement"
          application/xml:
            schema:
              $ref: "#/components/schemas/Agreement"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Agreement"
      responses:
        "201":
          description: "Agreement Created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Agreement"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/badRequestBadRequest"
        "401":
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/badRequestUnauthorized"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/internalServerErrror"
      security:
        - bearerAuth: []
    get:
      tags:
        - Trios Plus
      summary: "Get a list of agreements"
      description: "The /agreement endpoint is used to get a list of all agreements within the system."
      parameters:
        - name: limit
          in: query
          description: Number of results to return per page
          required: false
          schema:
            type: integer
            default: 10
        - name: sort
          in: query
          description: Sort the results based on a specific field (e.g., branchName, createdAt)
          required: false
          schema:
            type: string
            default: createdAt
        - name: searchKey
          in: query
          description: Key to search within agreement data (e.g., branchName, status)
          required: false
          schema:
            type: string
        - name: searchValue
          in: query
          description: Value to search for based on the specified searchKey
          required: false
          schema:
            type: string
      responses:
        "200":
          description: "Successful response"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Agreement"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/badRequestBadRequest"
        "401":
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/badRequestUnauthorized"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/internalServerErrror"
      security:
        - bearerAuth: []
  /agreement/{agreementId}:
    get:
      tags:
        - Trios Plus
      summary: "Get an agreement by ID"
      description: "Retrieve a specific agreement by its ID."
      parameters:
        - name: agreementId
          in: path
          description: ID of the agreement to retrieve
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Successful response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Agreement"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/badRequestBadRequest"
        "401":
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/badRequestUnauthorized"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/internalServerErrror"
      security:
        - bearerAuth: []
    put:
      tags:
        - Trios Plus
      summary: "Edit or Update an agreement by ID"
      description: "Edit or update a specific agreement by its ID."
      parameters:
        - name: agreementId
          in: path
          description: ID of the agreement to edit or update
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Agreement"
          application/xml:
            schema:
              $ref: "#/components/schemas/Agreement"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Agreement"
      responses:
        "200":
          description: "Agreement Edited/Updated Successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Agreement"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/badRequestBadRequest"
        "401":
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/badRequestUnauthorized"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/internalServerErrror"
      security:
        - bearerAuth: []
  /invoice:
    post:
      tags:
        - Trios Plus
      summary: "Create a new invoice"
      description: "The /invoice endpoint is used to create a new invoice within the system."
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewInvoice"
          application/xml:
            schema:
              $ref: "#/components/schemas/NewInvoice"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/NewInvoice"
      responses:
        "201":
          description: "Invoice Created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Invoice"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/badRequestBadRequest"
        "401":
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/badRequestUnauthorized"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/internalServerErrror"
      security:
        - bearerAuth: []
    get:
      tags:
        - Trios Plus
      summary: "Get a list of invoices"
      description: "The /invoice endpoint is used to get a list of all invoices within the system."
      parameters:
        - name: limit
          in: query
          description: Number of results to return per page
          required: false
          schema:
            type: integer
            default: 10
        - name: sort
          in: query
          description: Sort the results based on a specific field (e.g., invoiceNumber, createdAt)
          required: false
          schema:
            type: string
            default: createdAt
        - name: searchKey
          in: query
          description: Key to search within invoice data (e.g., invoiceNumber, userId)
          required: false
          schema:
            type: string
        - name: searchValue
          in: query
          description: Value to search for based on the specified searchKey
          required: false
          schema:
            type: string
      responses:
        "200":
          description: "Successful response"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Invoice"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/badRequestBadRequest"
        "401":
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/badRequestUnauthorized"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/internalServerErrror"
      security:
        - bearerAuth: []
  /invoice/{invoiceId}:
    get:
      tags:
        - Trios Plus
      summary: "Get an invoice by ID"
      description: "Retrieve a specific invoice by its ID."
      parameters:
        - name: invoiceId
          in: path
          description: ID of the invoice to retrieve
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Successful response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Invoice"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/badRequestBadRequest"
        "401":
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/badRequestUnauthorized"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/internalServerErrror"
      security:
        - bearerAuth: []
    put:
      tags:
        - Trios Plus
      summary: "Edit or Update an existing invoice"
      description: "The /invoice/{invoiceId} endpoint is used to edit or update an existing invoice by its ID."
      parameters:
        - name: invoiceId
          in: path
          description: ID of the invoice to edit or update
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EditInvoice"
          application/xml:
            schema:
              $ref: "#/components/schemas/EditInvoice"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/EditInvoice"
      responses:
        "200":
          description: "Invoice Edited/Updated Successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Invoice"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/badRequestBadRequest"
        "401":
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/badRequestUnauthorized"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/internalServerErrror"
      security:
        - bearerAuth: []
  /invoice/payment:
    post:
      tags:
        - Trios Plus
      summary: "Create a new invoice payment"
      description: "This endpoint is used to create a new invoice payment for tracking purposes."
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InvoicePayment"
          application/xml:
            schema:
              $ref: "#/components/schemas/InvoicePayment"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/InvoicePayment"
      responses:
        "201":
          description: "Invoice Payment Created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvoicePayment"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/badRequestBadRequest"
        "401":
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/badRequestUnauthorized"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/internalServerErrror"
      security:
        - bearerAuth: []
    get:
      tags:
        - Trios Plus
      summary: "Get a list of invoice payments"
      description: "Retrieve a list of all invoice payments within the system."
      parameters:
        - name: limit
          in: query
          description: Number of results per page
          required: false
          schema:
            type: integer
            default: 10
        - name: sort
          in: query
          description: Sort the results based on a specific field
          required: false
          schema:
            type: string
            default: createdAt
        - name: searchKey
          in: query
          description: Key to search within invoice payment data
          required: false
          schema:
            type: string
        - name: searchValue
          in: query
          description: Value to search for based on the specified searchKey
          required: false
          schema:
            type: string
      responses:
        "200":
          description: "Successful response"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/InvoicePayment"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/badRequestBadRequest"
        "401":
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/badRequestUnauthorized"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/internalServerErrror"
      security:
        - bearerAuth: []
  /invoice/payment/{paymentId}:
    put:
      tags:
        - Trios Plus
      summary: "Edit or Update an existing invoice payment"
      description: "Update an existing invoice payment by its ID."
      parameters:
        - name: paymentId
          in: path
          description: ID of the invoice payment to update
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InvoicePayment"
          application/xml:
            schema:
              $ref: "#/components/schemas/InvoicePayment"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/InvoicePayment"
      responses:
        "200":
          description: "Invoice Payment Updated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvoicePayment"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/badRequestBadRequest"
        "401":
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/badRequestUnauthorized"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/internalServerErrror"
      security:
        - bearerAuth: []
    get:
      tags:
        - Trios Plus
      summary: "Get an invoice payment by ID"
      description: "Retrieve a specific invoice payment by its ID."
      parameters:
        - name: paymentId
          in: path
          description: ID of the invoice payment to retrieve
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Successful response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvoicePayment"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/badRequestBadRequest"
        "401":
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/badRequestUnauthorized"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/internalServerErrror"
      security:
        - bearerAuth: []

  /bulkInvoiceGenerations:
    get:
      tags:
        - Trios Plus
      summary: "Get a list of rate contracts for bulk invoice generation"
      description: "Retrieve a list of rate contracts with product type 'RECURRING' that fall within the specified start and end dates."
      parameters:
        - name: productType
          description: Product type must be Recurring
          in: query
          required: true
          schema:
            type: string
            enum:
              - "RECURRING"
        - name: startDate
          in: query
          description: Start date for the rate contract
          required: true
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          description: End date for the rate contract
          required: true
          schema:
            type: string
            format: date
      responses:
        "200":
          description: "Successful response"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RateContract"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/badRequestBadRequest"
        "401":
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/badRequestUnauthorized"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/internalServerErrror"
      security:
        - bearerAuth: []
  /invoices/canceled:
    get:
      tags:
        - Trios Plus
      summary: "Get Invoices with Status DELETED"
      description: "Retrieve a list of invoices with a status of 'DELETED'."
      parameters:
        - name: status
          in: query
          description: Fetch canceled invoices with status
          required: true
          schema:
            type: string
            default: "DELETED"
            enum:
              - "DELETED"
        - name: limit
          in: query
          description: Number of results to return per page
          required: false
          schema:
            type: integer
            default: 10
        - name: sort
          in: query
          description: Sort the results based on a specific field (e.g., invoiceNumber, createdAt)
          required: false
          schema:
            type: string
            default: createdAt
        - name: searchKey
          in: query
          description: Key to search within invoice data (e.g., invoiceNumber, userId)
          required: false
          schema:
            type: string
        - name: searchValue
          in: query
          description: Value to search for based on the specified searchKey
          required: false
          schema:
            type: string
      responses:
        "200":
          description: "Successful response"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Invoice"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/badRequestBadRequest"
        "401":
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/badRequestUnauthorized"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/internalServerErrror"
      security:
        - bearerAuth: []
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT Authorization header using the Bearer scheme.
    Firebase-staging:
      type: "oauth2"
      flows: {}
      x-amazon-apigateway-authorizer:
        identitySource: "$request.header.Authorization"
        jwtConfiguration:
          audience:
            - "trios-plus-test"
          issuer: "https://securetoken.google.com/trios-plus-test"
        type: "jwt"
  schemas:
    companySchema:
      type: object
      properties:
        address:
          type: string
          description: Address of the company
          example: "Plot No B, JVA Mall, New Kopre Gaothan, Hingane Bk Maharshi, Karve Nagar"
          required:
            - "Address is required"

        name:
          type: string
          description: Name of the company
          example: "Asus1"
          required:
            - "Name is required"

        pincode:
          type: string
          description: Pincode of the company
          example: "411052"
          required:
            - "Pincode is required"

        state:
          type: string
          description: State of the company
          example: "Maharashtra"
          required:
            - "State is required"

        city:
          type: string
          description: City of the company
          example: "Pune City"
          required:
            - "City is required"

        billingAddresses:
          type: array
          description: Billing addresses of the company
          items:
            type: object
            properties:
              address:
                type: string
                description: Billing address of the company
              pincode:
                type: string
                description: Billing address pincode
              city:
                type: string
                description: Billing address city
              state:
                type: string
                description: Billing address state
            required:
              - "At least one address is required"

        users:
          type: array
          items:
            type: string
          description: List of user IDs associated with the company
          example: []

        isVerified:
          type: boolean
          description: Indicates whether the company is verified
          example: true

        status:
          type: string
          description: Status of the company
          enum:
            - "ACTIVE"
            - "INACTIVE"
          example: "ACTIVE"
          required:
            - "Status is required - in All Caps"

        country:
          type: string
          description: Country of the company
          example: "India"
          required:
            - "Country is required"

        createdAt:
          type: string
          format: date-time
          description: Date and time when the company was created
          example: "2024-04-23T09:29:37.336Z"
          required:
            - "CreatedAt is required"

        modifiedAt:
          type: string
          format: date-time
          description: Date and time when the company was last modified
          example: "2024-04-23T09:29:39.319Z"
          required:
            - "ModifiedAt is required"

        isProcMaster:
          type: boolean
          description: Indicates whether the company is a procurement master

        isProcStar:
          type: boolean
          description: Indicates whether the company is a procurement star

        userEmails:
          type: array
          items:
            type: string
          description: List of email addresses associated with the company
          example: []

        companyStatus:
          type: string
          description: Status of the company
          enum:
            - "ACTIVE"
            - "INACTIVE"
          example: "ACTIVE"
          required:
            - "Status is required - in All Caps"

        companyType:
          type: string
          description: Type of the company
          example: "vendor"
          required:
            - "Company Type is required, either vendor or empty string"

        vendorDocuments:
          type: array
          items:
            type: string
          description: List of vendor documents associated with the company
          example: []

        GSTIN:
          type: string
          description: Goods and Services Tax Identification Number of the company
          example: "564ADSFASD465"

        orgId:
          type: string
          description: Organization ID of the company
          example: "trios"
          required:
            - "Organization ID is required"

    User:
      type: object
      properties:
        _id:
          type: string
          description: Unique identifier for the user
          example: "6628f3bd438e9ea436619bc3"
        firebaseId:
          type: string
          description: Firebase ID of the user
          example: "oa1zR2RystM2KpNI306UYstU4cy2"
        createdAt:
          type: string
          format: date-time
          description: Timestamp of when the user was created
          example: "2024-04-24T11:57:50.887Z"
        username:
          type: string
          description: Username of the user
          example: "123456789"
          required:
            - "Username is required"
        emails:
          type: array
          items:
            $ref: "#/components/schemas/Email"
        profile:
          $ref: "#/components/schemas/UserProfile"
        status:
          type: string
          description: Status of the user account
          example: "ACTIVE"
        isProcMaster:
          type: boolean
          description: Indicates if the user is a procurement master
          example: false
        isProcStar:
          type: boolean
          description: Indicates if the user is a procurement star
          example: false
        roles:
          type: array
          items:
            type: string
            description: Roles assigned to the user
          example:
            - "VENDOR-ADMIN"
        branch:
          type: array
          items:
            type: string
            description: Branches associated with the user
        orgId:
          type: string
          description: Organization ID of the user
          example: "trios"

    Email:
      type: object
      properties:
        address:
          type: string
          description: Email address
          example: "om.gaikwad@bc.in"
        verified:
          type: boolean
          description: Indicates if the email is verified
          example: true

    UserProfile:
      type: object
      properties:
        firstName:
          type: string
          description: First name of the user
          example: "Om"
        lastName:
          type: string
          description: Last name of the user
          example: "Gaikwad"
        companyId:
          type: string
          description: ID of the company associated with the user
          example: "6628f3bc438e9ea436619bc2"
        isCompleted:
          type: boolean
          description: Indicates if the user profile is completed
          example: true
        stepSeller:
          type: string
          description: Step of the seller registration process
          example: "register/user"
        verification:
          $ref: "#/components/schemas/Verification"
        notificationCount:
          type: integer
          description: Number of unread notifications for the user
          example: 0
        threads:
          type: array
          items:
            type: string
            description: IDs of the threads associated with the user
        modifiedAt:
          type: string
          format: date-time
          description: Timestamp of when the user profile was last modified
          example: "2024-04-24T11:57:50.887Z"
        hod:
          type: boolean
          description: Indicates if the user is a head of department
          example: true

    Verification:
      type: object
      properties:
        isEmailVerified:
          type: boolean
          description: Indicates if the user's email is verified
          example: true
        isMobileVerified:
          type: boolean
          description: Indicates if the user's mobile number is verified
          example: true
        isUserVerified:
          type: boolean
          description: Indicates if the user is verified
          example: true
    Branch:
      type: object
      properties:
        _id:
          type: string
          description: Unique identifier for the branch
          example: "657192d7222092494d31cdcd"
        label:
          type: string
          description: Label or name of the branch
          example: "NIKHIL CODING TEST BRANCH"
        value:
          type: string
          description: Value or name of the branch
          example: "NIKHIL CODING TEST BRANCH"
        branchAddress:
          type: string
          description: Address of the branch
          example: "AKASH GANGA COLONY"
        branchPincode:
          type: string
          description: Pincode of the branch
          example: "828109"
        branchCity:
          type: string
          description: City of the branch
          example: "Dhanbad"
        branchState:
          type: string
          description: State of the branch
          example: "Jharkhand"
        branchCountry:
          type: string
          description: Country of the branch
          example: "India"
        branchGST:
          type: string
          description: GST number of the branch
          example: "18"
        branchLayout:
          type: string
          description: Layout of the branch
          example: "NIKHIL TEST LAYOUT"
        branchFacilities:
          type: array
          items:
            type: string
          description: List of facilities available in the branch
          example:
            - "Events"
            - "Workdesk"
            - "Signage Board "
            - "Promotion Event"
            - "Meeting Room"
            - "Private Cabin"
            - "Conference Room"
            - "Deposit"
            - "Food"
            - "Virtual Office"
            - "Signage"
            - "Late payment fee"
            - "Other Fines"
            - "Storage Unit"
            - "Floating Desk"
            - "Documentation Assistance"
            - "Recreational Area/Event Space"
            - "Exit Charges"
            - "IT Supplies"
            - "Relieving Charges"
            - "Convenience Fees"
            - "Transportation"
        status:
          type: string
          description: Status of the branch
          example: "operational"
        orgId:
          type: string
          description: Organization ID of the branch
          example: "trios"
        cityIdentifier:
          type: string
          description: City identifier of the branch
          example: "PUN"
        stateIdentifier:
          type: string
          description: State identifier of the branch
          example: "MH"

    Category:
      type: object
      properties:
        _id:
          type: string
          description: Unique identifier for the category
          example: "662213b75a906a23aaff9cad"
        label:
          type: string
          description: Label or name of the category
          example: "f"
        value:
          type: string
          description: Value or name of the category
          example: "f"
        categoryDescription:
          type: string
          description: Description of the category
          example: "f"
        branchId:
          type: string
          description: ID of the branch associated with the category
          example: "662213a45a906a23aaff9cab"
        branchName:
          type: string
          description: Name of the branch associated with the category
          example: "f"
        orgId:
          type: string
          description: Organization ID of the category
          example: "trios"
        createdAt:
          type: string
          format: date-time
          description: Timestamp of when the category was created
          example: "2024-04-19T06:48:23.163Z"
        modifiedAt:
          type: string
          format: date-time
          description: Timestamp of when the category was last modified
          example: "2024-04-19T06:49:53.271Z"
        status:
          type: string
          description: Status of the category
          example: "DELETED"

    Product:
      type: object
      properties:
        _id:
          type: string
          description: Unique identifier for the product
          example: "66139a212c6b68e0012a9f46"
        categoryId:
          type: string
          description: ID of the category associated with the product
          example: "66139a052c6b68e0012a9f45"
        categoryName:
          type: string
          description: Name of the category associated with the product
          example: "Workdesk"
        branchId:
          type: string
          description: ID of the branch associated with the product
          example: "661399c0438a93b4d729221b"
        branchName:
          type: string
          description: Name of the branch associated with the product
          example: "TRIOS Lonavala"
        brands:
          type: array
          items:
            type: string
          description: List of brands associated with the product
        isPrimary:
          type: integer
          description: Indicates if the product is primary
          example: 1
        keywords:
          type: string
          description: Keywords related to the product
        name:
          type: string
          description: Name of the product
          example: "WorkDesk"
        primaryProductId:
          type: string
          description: ID of the primary product
        priceRange:
          type: string
          description: Price range of the product
        productSerial:
          type: string
          description: Serial number of the product
          example: "0000000"
        productSpecifications:
          type: array
          items:
            type: object
            properties:
              productDescription:
                type: string
                description: Description of the product
          description: Specifications of the product
          example:
            - productDescription: "Work desk"
        productType:
          type: string
          description: Type of the product
          example: "RECURRING"
        refundPolicy:
          type: string
          description: Refund policy for the product
          example: "NONREFUNDABLE"
        refundType:
          type: string
          description: Type of refund for the product
          example: "NONREFUNDABLE"
        tax:
          type: number
          description: Tax percentage applied to the product
          example: 18
        taxType:
          type: string
          description: Type of tax applied to the product
          example: "GST"
        agreementProduct:
          type: boolean
          description: Indicates if the product is an agreement product
        orgId:
          type: string
          description: Organization ID of the product
          example: "trios"
        createdAt:
          type: string
    RateContract:
      type: object
      properties:
        _id:
          type: string
          description: Unique identifier for the rate contract
          example: "6620cf4a92a997d8da356ba3"
        buyerId:
          type: string
          description: ID of the buyer associated with the rate contract
          example: "656dae8feffea0d163b95b34"
        companyId:
          type: string
          description: ID of the company associated with the rate contract
          example: "656dae8deffea0d163b95b33"
        productId:
          type: string
          description: ID of the product associated with the rate contract
          example: "6620cb8bc6835e239d460ef3"
        productName:
          type: string
          description: Name of the product associated with the rate contract
          example: "NEW CATEGORY NEW PRODUCT"
        productPrice:
          type: number
          description: Price of the product
          example: 1000
        quantity:
          type: integer
          description: Quantity of the product
          example: 1
        tax:
          type: number
          description: Tax percentage applied to the product
          example: 18
        sellerUnitPrice:
          type: number
          description: Unit price of the product for the seller
          example: null
        commission:
          type: number
          description: Commission for the seller
          example: null
        taxType:
          type: string
          description: Type of tax applied to the product
          example: "GST"
        startDate:
          type: string
          format: date-time
          description: Start date of the rate contract
          example: "2024-04-17T18:30:00.000Z"
        endDate:
          type: string
          format: date-time
          description: End date of the rate contract
          example: "2024-04-29T18:30:00.000Z"
        validityDate:
          type: string
          format: date-time
          description: Validity date of the rate contract
          example: "2024-04-29T18:30:00.000Z"
        unit:
          type: string
          description: Unit of the product
          example: "Nos."
        requirementId:
          type: string
          description: ID of the requirement associated with the rate contract
          example: "1"
        serialNumber:
          type: string
          description: Serial number of the product
          example: "0"
        createdAt:
          type: string
          format: date-time
          description: Timestamp of when the rate contract was created
          example: "2024-04-18T07:44:10.300Z"
        procmartState:
          type: string
          description: State of the rate contract in the procurement process
          example: null
        productSpecifications:
          type: string
          description: Specifications of the product
          example: null
        refundType:
          type: string
          description: Type of refund for the product
          example: "NONREFUNDABLE"
        productType:
          type: string
          description: Type of the product
          example: "RECURRING"
        branchName:
          type: string
          description: Name of the branch associated with the rate contract
          example: "NEW BRANCH 3"
        branchId:
          type: string
          description: ID of the branch associated with the rate contract
          example: "6620c770c6835e239d460ef2"
        orgId:
          type: string
          description: Organization ID of the rate contract
          example: "trios"
        modifiedAt:
          type: string
          format: date-time
          description: Timestamp of when the rate contract was last modified
          example: "2024-04-18T07:48:47.328Z"
    Agreement:
      type: object
      properties:
        _id:
          type: string
          description: Unique identifier for the agreement
          example: "65d49b6d1c272f97cab8bba6"
        companyId:
          type: string
          description: ID of the company associated with the agreement
          example: "25RM7NfaxPqriey9n"
        branchId:
          type: string
          description: ID of the branch associated with the agreement
          example: "659b9c0f1dd34e2463c5d318"
        branchName:
          type: string
          description: Name of the branch associated with the agreement
          example: "Nikhil Pvt Ltd Branch test"
        branch:
          type: string
          description: Branch name
          example: "Nikhil Pvt Ltd Branch test"
        draftEntity:
          type: array
          items:
            type: object
            properties:
              startDate:
                type: string
                format: date-time
                description: Start date of the draft entity
              endDate:
                type: string
                format: date-time
                description: End date of the draft entity
              productType:
                type: string
                description: Type of the product in the draft entity
              quantity:
                type: integer
                description: Quantity of the product in the draft entity
              standardPrice:
                type: number
                description: Standard price of the product in the draft entity
              unitPrice:
                type: number
                description: Unit price of the product in the draft entity
              billingType:
                type: string
                description: Billing type for the draft entity
              officeHours:
                type: string
                description: Office hours for the draft entity
              productId:
                type: string
                description: ID of the product in the draft entity
          description: Draft entity details
        deposit:
          type: number
          description: Deposit amount
          example: 100
        lockIn:
          type: string
          description: Lock-in period
          example: "Eight"
        rentalAnnualIncrementPercent:
          type: string
          description: Rental annual increment percentage
          example: "5"
        noticePeriod:
          type: string
          description: Notice period
          example: "Three"
        conferenceRoomUsageHours:
          type: integer
          description: Conference room usage hours
          example: 1
        conferenceRoomExtraChargesPerHour:
          type: integer
          description: Extra charges per hour for conference room usage
          example: 1
        workstationNumbers:
          type: string
          description: Number of workstations
          example: "1"
        paymentDueDate:
          type: string
          description: Payment due date
          example: "10th business day"
        status:
          type: string
          description: Status of the agreement
          example: "APPROVED"
        specialArrangements:
          type: array
          items:
            type: object
            properties:
              term:
                type: string
                description: Special arrangement term
                example: "1"
        orgId:
          type: string
          description: Organization ID of the agreement
          example: "trios"
        createdAt:
          type: string
          format: date-time
          description: Timestamp of when the agreement was created
          example: "2024-02-20T12:30:37.102Z"
        modifiedAt:
          type: string
          format: date-time
          description: Timestamp of when the agreement was last modified
          example: "2024-02-23T09:54:18.664Z"
        supportingDocs:
          type: array
          items:
            type: object
            properties:
              documentUrl:
                type: string
                description: URL of the supporting document
                example: "https://triosplus-staging.s3.ap-south-1.amazonaws.com/25RM7NfaxPqriey9n/agreement-documents/individualAadharCard.jpeg"
              name:
                type: string
                description: Name of the supporting document
                example: "applications-of-ai-how-ai-is-being-used-in-2023 (1).jpeg"
              size:
                type: string
                description: Size of the supporting document
                example: "130.72 KB"
              type:
                type: string
                description: Type of the supporting document
                example: "jpeg"
              upLoadedAt:
                type: string
                format: date-time
                description: Timestamp of when the supporting document was uploaded
                example: "2024-02-23T09:54:11.872Z"
    Invoice:
      type: object
      properties:
        _id:
          type: string
          description: Unique identifier for the invoice
          example: "6629e8b8f61fc3439800ddde"
        status:
          type: string
          description: Status of the invoice
          example: "New"
        invoiceNumber:
          type: string
          description: Invoice number
          example: "MH/PUN/1410"
        poDetails:
          type: string
          description: Purchase order details
          example: ""
        poNumber:
          type: string
          description: Purchase order number
          example: ""
        userId:
          type: string
          description: ID of the user associated with the invoice
          example: "Pz2WDEsNLj7kzJq3d"
        companyId:
          type: string
          description: ID of the company associated with the invoice
          example: "27QfHoPAro3wLzC2C"
        individualReqObj:
          type: array
          items:
            type: object
            properties:
              product:
                type: string
                description: Name of the product
              quantity:
                type: integer
                description: Quantity of the product
              unitPrice:
                type: number
                description: Unit price of the product
              totalPrice:
                type: number
                description: Total price of the product
              totalPriceBeforeTax:
                type: number
                description: Total price of the product before tax
              taxation:
                type: number
                description: Tax percentage
              CGST:
                type: number
                description: CGST percentage
              SGST:
                type: number
                description: SGST percentage
              IGST:
                type: number
                description: IGST percentage
              CGSTVal:
                type: number
                description: CGST value
              SGSTVal:
                type: number
                description: SGST value
              IGSTVal:
                type: number
                description: IGST value
              specifications:
                type: string
                description: Specifications of the product
              rateContractId:
                type: string
                description: ID of the rate contract
              unit:
                type: string
                description: Unit of the product
              requirementId:
                type: string
                description: ID of the requirement
              orgId:
                type: string
                description: Organization ID
        totalPriceBeforeTax:
          type: number
          description: Total price of the invoice before tax
          example: 101
        taxation:
          type: number
          description: Total tax percentage
          example: 18.18
        CGST:
          type: number
          description: CGST percentage
          example: 9.09
        SGST:
          type: number
          description: SGST percentage
          example: 9.09
        IGST:
          type: number
          description: IGST percentage
          example: 0
        totalPrice:
          type: number
          description: Total price of the invoice
          example: 120
        logisticsChargeOption:
          type: array
          items:
            type: string
        amountPayble:
          type: number
          description: Amount payable
          example: 120
        procmartState:
          type: string
          description: State of the invoice in the procurement process
          example: ""
        buyerTaxType:
          type: string
          description: Tax type for the buyer
          example: "GST"
        amountDue:
          type: number
          description: Amount due
          example: 120
        amountPaid:
          type: number
          description: Amount paid
          example: 0
        shipmentAddress:
          type: object
          properties:
            address:
              type: string
              description: Shipment address
              example: "Pune"
            pincode:
              type: integer
              description: Shipment address pincode
              example: 411045
            city:
              type: string
              description: Shipment address city
              example: "Pune City"
            state:
              type: string
              description: Shipment address state
              example: "MAHARASHTRA"
        billingAddress:
          type: object
          properties:
            address:
              type: string
              description: Billing address
              example: "Viman Nagar"
            pincode:
              type: string
              description: Billing address pincode
              example: "411014"
            city:
              type: string
              description: Billing address city
              example: "Pune City"
            state:
              type: string
              description: Billing address state
              example: "MAHARASHTRA"
        tds:
          type: number
          description: TDS amount
          example: 0
        invoiceNotes:
          type: string
          description: Invoice notes
          example: ""
        invoiceStatus:
          type: string
          description: Status of the invoice
          example: "generated"
        branchName:
          type: string
          description: Name of the branch
          example: "Balewadi-Pune"
        orgId:
          type: string
          description: Organization ID
          example: "trios"
        createdAt:
          type: string
          format: date-time
          description: Timestamp of when the invoice was created
          example: "2024-04-25T05:23:04.602Z"
        modifiedAt:
          type: string
          format: date-time
          description: Timestamp of when the invoice was last modified
          example: "2024-04-25T05:23:04.642Z"
        branchId:
          type: string
          description: ID of the branch
          example: "FQuZnPwxHtY3JXKYt"
    NewInvoice:
      type: object
      properties:
        rateContractData:
          type: array
          items:
            $ref: "#/components/schemas/InvoiceProductAgreement"
        address:
          type: string
          description: Address for the invoice
        poDetails:
          type: string
          description: Purchase order details
        invoiceNotes:
          type: string
          description: Invoice notes
        companyId:
          type: string
          description: ID of the company associated with the invoice
        userId:
          type: string
          description: ID of the user associated with the invoice
        paidStatus:
          type: string
          description: Paid status of the invoice
          example: "UN-PAID"

    EditInvoice:
      type: object
      properties:
        invoiceId:
          type: string
          description: ID of the invoice to be edited
        rateContractData:
          type: array
          items:
            $ref: "#/components/schemas/InvoiceProductAgreement"
        address:
          type: string
          description: Address for the invoice
        poDetails:
          type: string
          description: Purchase order details
        invoiceNotes:
          type: string
          description: Invoice notes
        companyId:
          type: string
          description: ID of the company associated with the invoice
        userId:
          type: string
          description: ID of the user associated with the invoice
        paidStatus:
          type: string
          description: Paid status of the invoice
          example: "UN-PAID"

    UpdatePaidInvoice:
      type: object
      properties:
        invoiceId:
          type: string
          description: ID of the invoice to be updated
        rateContractData:
          type: array
          items:
            $ref: "#/components/schemas/InvoiceProductAgreement"
        address:
          type: string
          description: Address for the invoice
        poDetails:
          type: string
          description: Purchase order details
        invoiceNotes:
          type: string
          description: Invoice notes
        companyId:
          type: string
          description: ID of the company associated with the invoice
        userId:
          type: string
          description: ID of the user associated with the invoice
        paidStatus:
          type: string
          description: Paid status of the invoice
          example: "PAID"

    InvoiceProductAgreement:
      type: object
      properties:
        rateContractId:
          type: string
          description: ID of the rate contract
        quantity:
          type: integer
          description: Quantity of the product
        specifications:
          type: string
          description: Specifications of the product
    InvoicePayment:
      type: object
      properties:
        invoiceId:
          type: string
        amount:
          type: number
        tds:
          type: number
        baseAmount:
          type: number
        paymentMethod:
          type: string
        notes:
          type: string
        amountPayable:
          type: number
        amountDue:
          type: number
        amountPaid:
          type: number
        orgId:
          type: string
        createdAt:
          type: string
          format: date-time
    badRequestBadRequest:
      type: object
      properties:
        status:
          type: string
          description: Status of the request
          example: "Bad Request"
        statusCode:
          type: integer
          description: HTTP status code
          example: 400
        error:
          type: string
          description: Error message
          example: "Bad Request - Bad Request"

    badRequestUnauthorized:
      type: object
      properties:
        status:
          type: string
          description: Status of the request
          example: "Unauthorized"
        statusCode:
          type: integer
          description: HTTP status code
          example: 401
        error:
          type: string
          description: Error message
          example: "Bad Request - Unauthorized"

    paymentRequired:
      type: object
      properties:
        status:
          type: string
          description: Status of the request
          example: "Payment Required"
        statusCode:
          type: integer
          description: HTTP status code
          example: 402
        error:
          type: string
          description: Error message
          example: "Payment Required"

    forbidden:
      type: object
      properties:
        status:
          type: string
          description: Status of the request
          example: "Forbidden"
        statusCode:
          type: integer
          description: HTTP status code
          example: 403
        error:
          type: string
          description: Error message
          example: "Forbidden"

    notFound:
      type: object
      properties:
        status:
          type: string
          description: Status of the request
          example: "Not Found"
        statusCode:
          type: integer
          description: HTTP status code
          example: 404
        error:
          type: string
          description: Error message
          example: "Not Found"

    methodNotAllowed:
      type: object
      properties:
        status:
          type: string
          description: Status of the request
          example: "Method Not Allowed"
        statusCode:
          type: integer
          description: HTTP status code
          example: 405
        error:
          type: string
          description: Error message
          example: "Method Not Allowed"

    notAcceptable:
      type: object
      properties:
        status:
          type: string
          description: Status of the request
          example: "Not Acceptable"
        statusCode:
          type: integer
          description: HTTP status code
          example: 406
        error:
          type: string
          description: Error message
          example: "Not Acceptable"

    proxyAuthenticationRequired:
      type: object
      properties:
        status:
          type: string
          description: Status of the request
          example: "Proxy Authentication Required"
        statusCode:
          type: integer
          description: HTTP status code
          example: 407
        error:
          type: string
          description: Error message
          example: "Proxy Authentication Required"

    requestTimeout:
      type: object
      properties:
        status:
          type: string
          description: Status of the request
          example: "Request Timeout"
        statusCode:
          type: integer
          description: HTTP status code
          example: 408
        error:
          type: string
          description: Error message
          example: "Request Timeout"

    conflict:
      type: object
      properties:
        status:
          type: string
          description: Status of the request
          example: "Conflict"
        statusCode:
          type: integer
          description: HTTP status code
          example: 409
        error:
          type: string
          description: Error message
          example: "Conflict"

    gone:
      type: object
      properties:
        status:
          type: string
          description: Status of the request
          example: "Gone"
        statusCode:
          type: integer
          description: HTTP status code
          example: 410
        error:
          type: string
          description: Error message
          example: "Gone"

    lengthRequired:
      type: object
      properties:
        status:
          type: string
          description: Status of the request
          example: "Length Required"
        statusCode:
          type: integer
          description: HTTP status code
          example: 411
        error:
          type: string
          description: Error message
          example: "Length Required"

    preconditionFailed:
      type: object
      properties:
        status:
          type: string
          description: Status of the request
          example: "Precondition Failed"
        statusCode:
          type: integer
          description: HTTP status code
          example: 412
        error:
          type: string
          description: Error message
          example: "Precondition Failed"

    requestEntityTooLarge:
      type: object
      properties:
        status:
          type: string
          description: Status of the request
          example: "Request Entity Too Large"
        statusCode:
          type: integer
          description: HTTP status code
          example: 413
        error:
          type: string
          description: Error message
          example: "Request Entity Too Large"

    requestURITooLong:
      type: object
      properties:
        status:
          type: string
          description: Status of the request
          example: "Request-URI Too Long"
        statusCode:
          type: integer
          description: HTTP status code
          example: 414
        error:
          type: string
          description: Error message
          example: "Request-URI Too Long"

    unsupportedMediaType:
      type: object
      properties:
        status:
          type: string
          description: Status of the request
          example: "Unsupported Media Type"
        statusCode:
          type: integer
          description: HTTP status code
          example: 415
        error:
          type: string
          description: Error message
          example: "Unsupported Media Type"

    requestedRangeNotSatisfiable:
      type: object
      properties:
        status:
          type: string
          description: Status of the request
          example: "Requested Range Not Satisfiable"
        statusCode:
          type: integer
          description: HTTP status code
          example: 416
        error:
          type: string
          description: Error message
          example: "Requested Range Not Satisfiable"

    expectationFailed:
      type: object
      properties:
        status:
          type: string
          description: Status of the request
          example: "Expectation Failed"
        statusCode:
          type: integer
          description: HTTP status code
          example: 417
        error:
          type: string
          description: Error message
          example: "Expectation Failed"

    imATeapot:
      type: object
      properties:
        status:
          type: string
          description: Status of the request
          example: "I'm a teapot"
        statusCode:
          type: integer
          description: HTTP status code
          example: 418
        error:
          type: string
          description: Error message
          example: "I'm a teapot"

    unprocessableEntity:
      type: object
      properties:
        status:
          type: string
          description: Status of the request
          example: "Unprocessable Entity"
        statusCode:
          type: integer
          description: HTTP status code
          example: 422
        error:
          type: string
          description: Error message
          example: "Unprocessable Entity"

    locked:
      type: object
      properties:
        status:
          type: string
          description: Status of the request
          example: "Locked"
        statusCode:
          type: integer
          description: HTTP status code
          example: 423
        error:
          type: string
          description: Error message
          example: "Locked"

    failedDependency:
      type: object
      properties:
        status:
          type: string
          description: Status of the request
          example: "Failed Dependency"
        statusCode:
          type: integer
          description: HTTP status code
          example: 424
        error:
          type: string
          description: Error message
          example: "Failed Dependency"

    unorderedCollection:
      type: object
      properties:
        status:
          type: string
          description: Status of the request
          example: "Unordered Collection"
        statusCode:
          type: integer
          description: HTTP status code
          example: 425
        error:
          type: string
          description: Error message
          example: "Unordered Collection"

    upgradeRequired:
      type: object
      properties:
        status:
          type: string
          description: Status of the request
          example: "Upgrade Required"
        statusCode:
          type: integer
          description: HTTP status code
          example: 426
        error:
          type: string
          description: Error message
          example: "Upgrade Required"

    preconditionRequired:
      type: object
      properties:
        status:
          type: string
          description: Status of the request
          example: "Precondition Required"
        statusCode:
          type: integer
          description: HTTP status code
          example: 428
        error:
          type: string
          description: Error message
          example: "Precondition Required"

    tooManyRequests:
      type: object
      properties:
        status:
          type: string
          description: Status of the request
          example: "Too Many Requests"
        statusCode:
          type: integer
          description: HTTP status code
          example: 429
        error:
          type: string
          description: Error message
          example: "Too Many Requests"

    requestHeaderFieldsTooLarge:
      type: object
      properties:
        status:
          type: string
          description: Status of the request
          example: "Request Header Fields Too Large"
        statusCode:
          type: integer
          description: HTTP status code
          example: 431
        error:
          type: string
          description: Error message
          example: "Request Header Fields Too Large"

    noResponse:
      type: object
      properties:
        status:
          type: string
          description: Status of the request
          example: "No Response"
        statusCode:
          type: integer
          description: HTTP status code
          example: 444
        error:
          type: string
          description: Error message
          example: "No Response"

    retryWith:
      type: object
      properties:
        status:
          type: string
          description: Status of the request
          example: "Retry With"
        statusCode:
          type: integer
          description: HTTP status code
          example: 449
        error:
          type: string
          description: Error message
          example: "Retry With"

    blockedByWindowsParentalControls:
      type: object
      properties:
        status:
          type: string
          description: Status of the request
          example: "Blocked By Windows Parental Controls"
        statusCode:
          type: integer
          description: HTTP status code
          example: 450
        error:
          type: string
          description: Error message
          example: "Blocked By Windows Parental Controls"

    unavailableForLegalReasons:
      type: object
      properties:
        status:
          type: string
          description: Status of the request
          example: "Unavailable For Legal Reasons"
        statusCode:
          type: integer
          description: HTTP status code
          example: 451
        error:
          type: string
          description: Error message
          example: "Unavailable For Legal Reasons"

    clientClosedRequest:
      type: object
      properties:
        status:
          type: string
          description: Status of the request
          example: "Client Closed Request"
        statusCode:
          type: integer
          description: HTTP status code
          example: 499
        error:
          type: string
          description: Error message
          example: "Client Closed Request"

    internalServerErrror:
      type: object
      properties:
        status:
          type: string
          description: Status of the request
          example: "500"
        error:
          type: string
          description: Error message
          example: "Internal Server Error"

x-amazon-apigateway-cors:
  allowMethods:
    - "*"
  allowHeaders:
    - "*"
  exposeHeaders:
    - "*"
  maxAge: 0
  allowCredentials: false
  allowOrigins:
    - "*"
